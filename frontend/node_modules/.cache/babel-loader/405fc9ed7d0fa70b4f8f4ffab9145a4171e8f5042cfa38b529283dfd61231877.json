{"ast":null,"code":"var _jsxFileName = \"/Users/gaetanbuelinckx/minutememo_app/frontend/src/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles.css';\nimport { RecorderContext } from './RecorderContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true; // Ensure credentials are included with every axios request\n\nconst AudioRecorder = () => {\n  _s();\n  const {\n    recording,\n    setRecording,\n    mediaRecorderRef,\n    audioChunksRef,\n    canvasRef,\n    audioCtxRef,\n    sourceRef,\n    animationFrameIdRef,\n    chunkNumberRef,\n    recordingIdRef,\n    streamRef,\n    stopRef,\n    meetingSessionId // Add meetingSessionId to context\n  } = useContext(RecorderContext);\n  const draw = useCallback(array => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = 10;\n    const barSpacing = 2;\n    const topRoundness = 2;\n    const bottomRoundness = 2;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#18A04F';\n    for (let i = 0; i < array.length; i++) {\n      const barHeight = array[i] / 2;\n      const x = i * (barWidth + barSpacing);\n      const y = height - barHeight;\n      ctx.beginPath();\n      ctx.moveTo(x, y + topRoundness);\n      ctx.quadraticCurveTo(x, y, x + topRoundness, y);\n      ctx.lineTo(x + barWidth - topRoundness, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + topRoundness);\n      ctx.lineTo(x + barWidth, y + barHeight - bottomRoundness);\n      ctx.quadraticCurveTo(x + barWidth, y + barHeight, x + barWidth - bottomRoundness, y + barHeight);\n      ctx.lineTo(x + bottomRoundness, y + barHeight);\n      ctx.quadraticCurveTo(x, y + barHeight, x, y + barHeight - bottomRoundness);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }, [canvasRef]);\n  useEffect(() => {\n    if (!recording) return;\n    const visualize = () => {\n      if (!sourceRef.current) return;\n      const analyser = audioCtxRef.current.createAnalyser();\n      analyser.fftSize = 256;\n      sourceRef.current.connect(analyser);\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      const drawVisualizer = () => {\n        analyser.getByteFrequencyData(dataArray);\n        draw(dataArray);\n        animationFrameIdRef.current = requestAnimationFrame(drawVisualizer);\n      };\n      drawVisualizer();\n      return () => cancelAnimationFrame(animationFrameIdRef.current);\n    };\n    visualize();\n  }, [recording, audioCtxRef, sourceRef, draw, animationFrameIdRef]);\n  const startRecording = async () => {\n    console.log(\"Recording started\");\n    recordingIdRef.current = uuidv4();\n    chunkNumberRef.current = 0; // Reset chunk number\n\n    let meetingSessionId = null;\n\n    // Here, you can either retrieve an existing session ID or leave it as null to let the backend create a new session\n    // For example, you might retrieve meetingSessionId from state or props:\n    // meetingSessionId = someStateOrPropValue;\n\n    try {\n      // Make an API call to create a new recording entry in the database\n      const response = await axios.post('http://localhost:5000/api/recordings', {\n        recording_id: recordingIdRef.current,\n        // Pass the generated recording ID\n        file_name: `${recordingIdRef.current}.webm`,\n        // Use the same recording ID for the file name\n        concatenation_status: 'pending',\n        // Set initial concatenation status to pending\n        concatenation_file_name: `${recordingIdRef.current}_list.txt`,\n        // Use the same recording ID for the concatenation list file\n        meeting_session_id: meetingSessionId // Ensure meetingSessionId is passed here\n        // Optionally pass meeting_name if creating a new session\n        // meeting_name: 'Custom Meeting Name'\n      });\n      if (response.status === 201) {\n        console.log('Recording entry created in the database.');\n\n        // Proceed with the recording if the entry was successfully created\n        navigator.mediaDevices.getUserMedia({\n          audio: true\n        }).then(stream => {\n          audioCtxRef.current = new (window.AudioContext || window.webkitAudioContext)();\n          sourceRef.current = audioCtxRef.current.createMediaStreamSource(stream);\n          streamRef.current = stream;\n          stopRef.current = false; // Reset stop flag\n          startNewChunk();\n          setRecording(true);\n        });\n      } else {\n        console.error('Failed to create recording entry in the database.');\n      }\n    } catch (error) {\n      console.error('Error creating recording entry in the database:', error);\n    }\n  };\n  const startNewChunk = () => {\n    if (stopRef.current) return; // Don't start new chunk if stopping\n\n    mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n    mediaRecorderRef.current.ondataavailable = event => {\n      audioChunksRef.current.push(event.data);\n      if (mediaRecorderRef.current.state === 'recording') {\n        uploadChunk(event.data);\n        mediaRecorderRef.current.stop();\n      }\n    };\n    mediaRecorderRef.current.onstop = () => {\n      if (!stopRef.current) {\n        setTimeout(startNewChunk, 0); // Delay for next chunk to ensure the current one is processed\n      }\n    };\n    mediaRecorderRef.current.start(5000); // Record in 5-second intervals\n  };\n  const uploadChunk = chunk => {\n    const formData = new FormData();\n    formData.append('chunk', chunk, `chunk_${chunkNumberRef.current}.webm`);\n    formData.append('chunk_number', chunkNumberRef.current);\n    formData.append('recording_id', recordingIdRef.current);\n    console.log(`Uploading chunk ${chunkNumberRef.current} for recording ID ${recordingIdRef.current}`);\n    chunkNumberRef.current++;\n    axios.post('http://localhost:5000/upload_chunk', formData).then(response => {\n      console.log(`Chunk ${chunkNumberRef.current - 1} uploaded successfully`);\n    }).catch(error => {\n      console.error(`Error uploading chunk ${chunkNumberRef.current - 1}:`, error);\n    });\n  };\n  const concatenateChunks = async () => {\n    try {\n      const response = await axios.post('http://localhost:5000/concatenate', {\n        recording_id: recordingIdRef.current // Ensure this value is correct and not null/undefined\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        console.log('Concatenation successful:', response.data.file_url);\n      } else {\n        console.error('Concatenation failed:', response.data.message);\n      }\n    } catch (error) {\n      console.error('Error concatenating chunks:', error);\n    }\n  };\n  const stopRecording = () => {\n    console.log(\"Recording stopped\");\n    stopRef.current = true; // Set stop flag\n    setRecording(false);\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (audioCtxRef.current) {\n      audioCtxRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(animationFrameIdRef.current);\n    concatenateChunks();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        disabled: recording,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        disabled: !recording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"300\",\n        height: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"a8aGTs9GwK1/2UDRbzSMJmBxCgU=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useContext","useEffect","useCallback","axios","v4","uuidv4","RecorderContext","jsxDEV","_jsxDEV","defaults","withCredentials","AudioRecorder","_s","recording","setRecording","mediaRecorderRef","audioChunksRef","canvasRef","audioCtxRef","sourceRef","animationFrameIdRef","chunkNumberRef","recordingIdRef","streamRef","stopRef","meetingSessionId","draw","array","canvas","current","ctx","getContext","width","height","barWidth","barSpacing","topRoundness","bottomRoundness","clearRect","fillStyle","i","length","barHeight","x","y","beginPath","moveTo","quadraticCurveTo","lineTo","closePath","fill","visualize","analyser","createAnalyser","fftSize","connect","bufferLength","frequencyBinCount","dataArray","Uint8Array","drawVisualizer","getByteFrequencyData","requestAnimationFrame","cancelAnimationFrame","startRecording","console","log","response","post","recording_id","file_name","concatenation_status","concatenation_file_name","meeting_session_id","status","navigator","mediaDevices","getUserMedia","audio","then","stream","window","AudioContext","webkitAudioContext","createMediaStreamSource","startNewChunk","error","MediaRecorder","ondataavailable","event","push","data","state","uploadChunk","stop","onstop","setTimeout","start","chunk","formData","FormData","append","catch","concatenateChunks","headers","file_url","message","stopRecording","close","getTracks","forEach","track","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","_c","$RefreshReg$"],"sources":["/Users/gaetanbuelinckx/minutememo_app/frontend/src/AudioRecorder.js"],"sourcesContent":["import React, { useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles.css';\nimport { RecorderContext } from './RecorderContext';\n\naxios.defaults.withCredentials = true; // Ensure credentials are included with every axios request\n\nconst AudioRecorder = () => {\n  const {\n    recording, setRecording, mediaRecorderRef, audioChunksRef,\n    canvasRef, audioCtxRef, sourceRef, animationFrameIdRef, chunkNumberRef,\n    recordingIdRef, streamRef, stopRef, meetingSessionId // Add meetingSessionId to context\n  } = useContext(RecorderContext);\n\n  const draw = useCallback((array) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = 10;\n    const barSpacing = 2;\n    const topRoundness = 2;\n    const bottomRoundness = 2;\n\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#18A04F';\n\n    for (let i = 0; i < array.length; i++) {\n      const barHeight = array[i] / 2;\n      const x = i * (barWidth + barSpacing);\n      const y = height - barHeight;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y + topRoundness);\n      ctx.quadraticCurveTo(x, y, x + topRoundness, y);\n      ctx.lineTo(x + barWidth - topRoundness, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + topRoundness);\n      ctx.lineTo(x + barWidth, y + barHeight - bottomRoundness);\n      ctx.quadraticCurveTo(x + barWidth, y + barHeight, x + barWidth - bottomRoundness, y + barHeight);\n      ctx.lineTo(x + bottomRoundness, y + barHeight);\n      ctx.quadraticCurveTo(x, y + barHeight, x, y + barHeight - bottomRoundness);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    if (!recording) return;\n\n    const visualize = () => {\n      if (!sourceRef.current) return;\n\n      const analyser = audioCtxRef.current.createAnalyser();\n      analyser.fftSize = 256;\n      sourceRef.current.connect(analyser);\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n\n      const drawVisualizer = () => {\n        analyser.getByteFrequencyData(dataArray);\n        draw(dataArray);\n        animationFrameIdRef.current = requestAnimationFrame(drawVisualizer);\n      };\n\n      drawVisualizer();\n\n      return () => cancelAnimationFrame(animationFrameIdRef.current);\n    };\n\n    visualize();\n  }, [recording, audioCtxRef, sourceRef, draw, animationFrameIdRef]);\n\n  const startRecording = async () => {\n    console.log(\"Recording started\");\n    \n    recordingIdRef.current = uuidv4();\n    chunkNumberRef.current = 0; // Reset chunk number\n    \n    let meetingSessionId = null;\n\n    // Here, you can either retrieve an existing session ID or leave it as null to let the backend create a new session\n    // For example, you might retrieve meetingSessionId from state or props:\n    // meetingSessionId = someStateOrPropValue;\n\n    try {\n      // Make an API call to create a new recording entry in the database\n      const response = await axios.post('http://localhost:5000/api/recordings', {\n        recording_id: recordingIdRef.current, // Pass the generated recording ID\n        file_name: `${recordingIdRef.current}.webm`, // Use the same recording ID for the file name\n        concatenation_status: 'pending', // Set initial concatenation status to pending\n        concatenation_file_name: `${recordingIdRef.current}_list.txt`, // Use the same recording ID for the concatenation list file\n        meeting_session_id: meetingSessionId // Ensure meetingSessionId is passed here\n        // Optionally pass meeting_name if creating a new session\n        // meeting_name: 'Custom Meeting Name'\n      });\n  \n      if (response.status === 201) {\n        console.log('Recording entry created in the database.');\n\n        // Proceed with the recording if the entry was successfully created\n        navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n          audioCtxRef.current = new (window.AudioContext || window.webkitAudioContext)();\n          sourceRef.current = audioCtxRef.current.createMediaStreamSource(stream);\n          streamRef.current = stream;\n          stopRef.current = false;  // Reset stop flag\n          startNewChunk();\n    \n          setRecording(true);\n        });\n      } else {\n        console.error('Failed to create recording entry in the database.');\n      }\n    } catch (error) {\n      console.error('Error creating recording entry in the database:', error);\n    }\n  };\n\n  const startNewChunk = () => {\n    if (stopRef.current) return;  // Don't start new chunk if stopping\n\n    mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n\n    mediaRecorderRef.current.ondataavailable = event => {\n      audioChunksRef.current.push(event.data);\n      if (mediaRecorderRef.current.state === 'recording') {\n        uploadChunk(event.data);\n        mediaRecorderRef.current.stop();\n      }\n    };\n\n    mediaRecorderRef.current.onstop = () => {\n      if (!stopRef.current) {\n        setTimeout(startNewChunk, 0); // Delay for next chunk to ensure the current one is processed\n      }\n    };\n\n    mediaRecorderRef.current.start(5000); // Record in 5-second intervals\n  };\n\n  const uploadChunk = (chunk) => {\n    const formData = new FormData();\n    formData.append('chunk', chunk, `chunk_${chunkNumberRef.current}.webm`);\n    formData.append('chunk_number', chunkNumberRef.current);\n    formData.append('recording_id', recordingIdRef.current);\n    console.log(`Uploading chunk ${chunkNumberRef.current} for recording ID ${recordingIdRef.current}`);\n    chunkNumberRef.current++;\n\n    axios.post('http://localhost:5000/upload_chunk', formData)\n      .then(response => {\n        console.log(`Chunk ${chunkNumberRef.current - 1} uploaded successfully`);\n      })\n      .catch(error => {\n        console.error(`Error uploading chunk ${chunkNumberRef.current - 1}:`, error);\n      });\n  };\n\n  const concatenateChunks = async () => {\n    try {\n        const response = await axios.post('http://localhost:5000/concatenate', {\n            recording_id: recordingIdRef.current // Ensure this value is correct and not null/undefined\n        }, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n\n        if (response.status === 200) {\n            console.log('Concatenation successful:', response.data.file_url);\n        } else {\n            console.error('Concatenation failed:', response.data.message);\n        }\n    } catch (error) {\n        console.error('Error concatenating chunks:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    console.log(\"Recording stopped\");\n    stopRef.current = true;  // Set stop flag\n    setRecording(false);\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (audioCtxRef.current) {\n      audioCtxRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(animationFrameIdRef.current);\n    \n    concatenateChunks();\n  };\n\n  return (\n    <div className=\"audio-recorder\">\n      <h1>Audio Recorder</h1>\n      <div className=\"controls\">\n        <button onClick={startRecording} disabled={recording}>Start Recording</button>\n        <button onClick={stopRecording} disabled={!recording}>Stop Recording</button>\n      </div>\n      {recording && (\n        <div className=\"visualizer\">\n          <canvas ref={canvasRef} width=\"300\" height=\"100\"></canvas>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}