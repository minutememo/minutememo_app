{"ast":null,"code":"var _jsxFileName = \"/Users/gaetanbuelinckx/minutememo_app/frontend/src/AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles.css';\nimport { RecorderContext } from './RecorderContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = () => {\n  _s();\n  const {\n    recording,\n    setRecording,\n    mediaRecorderRef,\n    audioChunksRef,\n    canvasRef,\n    audioCtxRef,\n    sourceRef,\n    animationFrameIdRef,\n    chunkNumberRef,\n    recordingIdRef,\n    streamRef,\n    stopRef\n  } = useContext(RecorderContext);\n  const draw = useCallback(array => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = 10;\n    const barSpacing = 2;\n    const topRoundness = 2;\n    const bottomRoundness = 2;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#18A04F';\n    for (let i = 0; i < array.length; i++) {\n      const barHeight = array[i] / 2;\n      const x = i * (barWidth + barSpacing);\n      const y = height - barHeight;\n      ctx.beginPath();\n      ctx.moveTo(x, y + topRoundness);\n      ctx.quadraticCurveTo(x, y, x + topRoundness, y);\n      ctx.lineTo(x + barWidth - topRoundness, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + topRoundness);\n      ctx.lineTo(x + barWidth, y + barHeight - bottomRoundness);\n      ctx.quadraticCurveTo(x + barWidth, y + barHeight, x + barWidth - bottomRoundness, y + barHeight);\n      ctx.lineTo(x + bottomRoundness, y + barHeight);\n      ctx.quadraticCurveTo(x, y + barHeight, x, y + barHeight - bottomRoundness);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }, [canvasRef]);\n  useEffect(() => {\n    if (!recording) return;\n    const visualize = () => {\n      if (!sourceRef.current) return;\n      const analyser = audioCtxRef.current.createAnalyser();\n      analyser.fftSize = 256;\n      sourceRef.current.connect(analyser);\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n      const drawVisualizer = () => {\n        analyser.getByteFrequencyData(dataArray);\n        draw(dataArray);\n        animationFrameIdRef.current = requestAnimationFrame(drawVisualizer);\n      };\n      drawVisualizer();\n      return () => cancelAnimationFrame(animationFrameIdRef.current);\n    };\n    visualize();\n  }, [recording, audioCtxRef, sourceRef, draw, animationFrameIdRef]);\n  const startRecording = () => {\n    console.log(\"Recording started\");\n    recordingIdRef.current = uuidv4(); // Generate a new recording ID\n    chunkNumberRef.current = 0; // Reset chunk number\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      audioCtxRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      sourceRef.current = audioCtxRef.current.createMediaStreamSource(stream);\n      streamRef.current = stream;\n      stopRef.current = false; // Reset stop flag\n      startNewChunk();\n      setRecording(true);\n    });\n  };\n  const startNewChunk = () => {\n    if (stopRef.current) return; // Don't start new chunk if stopping\n\n    mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n    mediaRecorderRef.current.ondataavailable = event => {\n      audioChunksRef.current.push(event.data);\n      if (mediaRecorderRef.current.state === 'recording') {\n        uploadChunk(event.data);\n        mediaRecorderRef.current.stop();\n      }\n    };\n    mediaRecorderRef.current.onstop = () => {\n      if (!stopRef.current) {\n        setTimeout(startNewChunk, 0); // Delay for next chunk to ensure the current one is processed\n      }\n    };\n    mediaRecorderRef.current.start(5000); // Record in 5-second intervals\n  };\n  const uploadChunk = chunk => {\n    const formData = new FormData();\n    formData.append('chunk', chunk, `chunk_${chunkNumberRef.current}.webm`);\n    formData.append('chunk_number', chunkNumberRef.current);\n    formData.append('recording_id', recordingIdRef.current);\n    console.log(`Uploading chunk ${chunkNumberRef.current} for recording ID ${recordingIdRef.current}`);\n    chunkNumberRef.current++;\n    axios.post('http://localhost:5001/upload_chunk', formData).then(response => {\n      console.log(`Chunk ${chunkNumberRef.current - 1} uploaded successfully`);\n    }).catch(error => {\n      console.error(`Error uploading chunk ${chunkNumberRef.current - 1}:`, error);\n    });\n  };\n  const concatenateChunks = () => {\n    console.log(`Concatenating chunks for recording ID ${recordingIdRef.current}`);\n    axios.post('http://localhost:5001/concatenate', {\n      recording_id: recordingIdRef.current\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log('Concatenation successful:', response.data.file_url);\n    }).catch(error => {\n      console.error('Error concatenating chunks:', error);\n    });\n  };\n  const stopRecording = () => {\n    console.log(\"Recording stopped\");\n    stopRef.current = true; // Set stop flag\n    setRecording(false);\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (audioCtxRef.current) {\n      audioCtxRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(animationFrameIdRef.current);\n    concatenateChunks();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Recorder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        disabled: recording,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        disabled: !recording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizer\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"300\",\n        height: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"XP0fMzTy2Fj4ChJMZz3IRAryrMA=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useContext","useEffect","useCallback","axios","v4","uuidv4","RecorderContext","jsxDEV","_jsxDEV","AudioRecorder","_s","recording","setRecording","mediaRecorderRef","audioChunksRef","canvasRef","audioCtxRef","sourceRef","animationFrameIdRef","chunkNumberRef","recordingIdRef","streamRef","stopRef","draw","array","canvas","current","ctx","getContext","width","height","barWidth","barSpacing","topRoundness","bottomRoundness","clearRect","fillStyle","i","length","barHeight","x","y","beginPath","moveTo","quadraticCurveTo","lineTo","closePath","fill","visualize","analyser","createAnalyser","fftSize","connect","bufferLength","frequencyBinCount","dataArray","Uint8Array","drawVisualizer","getByteFrequencyData","requestAnimationFrame","cancelAnimationFrame","startRecording","console","log","navigator","mediaDevices","getUserMedia","audio","then","stream","window","AudioContext","webkitAudioContext","createMediaStreamSource","startNewChunk","MediaRecorder","ondataavailable","event","push","data","state","uploadChunk","stop","onstop","setTimeout","start","chunk","formData","FormData","append","post","response","catch","error","concatenateChunks","recording_id","headers","file_url","stopRecording","close","getTracks","forEach","track","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","_c","$RefreshReg$"],"sources":["/Users/gaetanbuelinckx/minutememo_app/frontend/src/AudioRecorder.js"],"sourcesContent":["import React, { useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles.css';\nimport { RecorderContext } from './RecorderContext';\n\nconst AudioRecorder = () => {\n  const {\n    recording, setRecording, mediaRecorderRef, audioChunksRef,\n    canvasRef, audioCtxRef, sourceRef, animationFrameIdRef, chunkNumberRef,\n    recordingIdRef, streamRef, stopRef\n  } = useContext(RecorderContext);\n\n  const draw = useCallback((array) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    const barWidth = 10;\n    const barSpacing = 2;\n    const topRoundness = 2;\n    const bottomRoundness = 2;\n\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#18A04F';\n\n    for (let i = 0; i < array.length; i++) {\n      const barHeight = array[i] / 2;\n      const x = i * (barWidth + barSpacing);\n      const y = height - barHeight;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y + topRoundness);\n      ctx.quadraticCurveTo(x, y, x + topRoundness, y);\n      ctx.lineTo(x + barWidth - topRoundness, y);\n      ctx.quadraticCurveTo(x + barWidth, y, x + barWidth, y + topRoundness);\n      ctx.lineTo(x + barWidth, y + barHeight - bottomRoundness);\n      ctx.quadraticCurveTo(x + barWidth, y + barHeight, x + barWidth - bottomRoundness, y + barHeight);\n      ctx.lineTo(x + bottomRoundness, y + barHeight);\n      ctx.quadraticCurveTo(x, y + barHeight, x, y + barHeight - bottomRoundness);\n      ctx.closePath();\n      ctx.fill();\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    if (!recording) return;\n\n    const visualize = () => {\n      if (!sourceRef.current) return;\n\n      const analyser = audioCtxRef.current.createAnalyser();\n      analyser.fftSize = 256;\n      sourceRef.current.connect(analyser);\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Uint8Array(bufferLength);\n\n      const drawVisualizer = () => {\n        analyser.getByteFrequencyData(dataArray);\n        draw(dataArray);\n        animationFrameIdRef.current = requestAnimationFrame(drawVisualizer);\n      };\n\n      drawVisualizer();\n\n      return () => cancelAnimationFrame(animationFrameIdRef.current);\n    };\n\n    visualize();\n  }, [recording, audioCtxRef, sourceRef, draw, animationFrameIdRef]);\n\n  const startRecording = () => {\n    console.log(\"Recording started\");\n    recordingIdRef.current = uuidv4(); // Generate a new recording ID\n    chunkNumberRef.current = 0; // Reset chunk number\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      audioCtxRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      sourceRef.current = audioCtxRef.current.createMediaStreamSource(stream);\n      streamRef.current = stream;\n      stopRef.current = false;  // Reset stop flag\n      startNewChunk();\n\n      setRecording(true);\n    });\n  };\n\n  const startNewChunk = () => {\n    if (stopRef.current) return;  // Don't start new chunk if stopping\n\n    mediaRecorderRef.current = new MediaRecorder(streamRef.current);\n\n    mediaRecorderRef.current.ondataavailable = event => {\n      audioChunksRef.current.push(event.data);\n      if (mediaRecorderRef.current.state === 'recording') {\n        uploadChunk(event.data);\n        mediaRecorderRef.current.stop();\n      }\n    };\n\n    mediaRecorderRef.current.onstop = () => {\n      if (!stopRef.current) {\n        setTimeout(startNewChunk, 0); // Delay for next chunk to ensure the current one is processed\n      }\n    };\n\n    mediaRecorderRef.current.start(5000); // Record in 5-second intervals\n  };\n\n  const uploadChunk = (chunk) => {\n    const formData = new FormData();\n    formData.append('chunk', chunk, `chunk_${chunkNumberRef.current}.webm`);\n    formData.append('chunk_number', chunkNumberRef.current);\n    formData.append('recording_id', recordingIdRef.current);\n    console.log(`Uploading chunk ${chunkNumberRef.current} for recording ID ${recordingIdRef.current}`);\n    chunkNumberRef.current++;\n\n    axios.post('http://localhost:5001/upload_chunk', formData)\n      .then(response => {\n        console.log(`Chunk ${chunkNumberRef.current - 1} uploaded successfully`);\n      })\n      .catch(error => {\n        console.error(`Error uploading chunk ${chunkNumberRef.current - 1}:`, error);\n      });\n  };\n\n  const concatenateChunks = () => {\n    console.log(`Concatenating chunks for recording ID ${recordingIdRef.current}`);\n    axios.post('http://localhost:5001/concatenate', { recording_id: recordingIdRef.current }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => {\n      console.log('Concatenation successful:', response.data.file_url);\n    })\n    .catch(error => {\n      console.error('Error concatenating chunks:', error);\n    });\n  };\n\n  const stopRecording = () => {\n    console.log(\"Recording stopped\");\n    stopRef.current = true;  // Set stop flag\n    setRecording(false);\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n    if (audioCtxRef.current) {\n      audioCtxRef.current.close();\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n    cancelAnimationFrame(animationFrameIdRef.current);\n    \n    concatenateChunks();\n  };\n\n  return (\n    <div className=\"audio-recorder\">\n      <h1>Audio Recorder</h1>\n      <div className=\"controls\">\n        <button onClick={startRecording} disabled={recording}>Start Recording</button>\n        <button onClick={stopRecording} disabled={!recording}>Stop Recording</button>\n      </div>\n      {recording && (\n        <div className=\"visualizer\">\n          <canvas ref={canvasRef} width=\"300\" height=\"100\"></canvas>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}